from aiogram import Router, F
import random
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from mephmetrbot.handlers.models import Users, Clans
from mephmetrbot.config import bot, LOGS_CHAT_ID
from datetime import datetime, timedelta
import asyncio
from aiogram.exceptions import TelegramBadRequest

router = Router()

games = {}
async def update_user_balance_and_drug_count(user_id: int, new_balance: int, new_drug_count: int):
    user = await Users.get(id=user_id)
    user.balance = new_balance
    user.drug_count = new_drug_count
    await user.save()

async def get_user(user_id):
    user, _ = await Users.get_or_create(id=user_id)
    return user

async def update_user_drug_count(user_id: int, new_count: int):
    user = await Users.get(id=user_id)
    user.drug_count = new_count
    await user.save()

@router.message(Command('profile'))
async def profile_command(message: Message):
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    if user == '7266772626':
        bot_user = await get_user(1)
        await message.reply(f"ü§ñ <b>–≠—Ç–æ –ë–æ—Ç</b>\nüåø <b>–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞:</b> <i>{bot_user.drug_count}</i> –≥—Ä–∞–º–º.",parse_mode='HTML')

    clan_name = None
    if user.clan_member:
        clan = await Clans.get_or_none(id=user.clan_member)
        clan_name = clan.clan_name if clan else None

    full_name = message.from_user.full_name if user_id == message.from_user.id else message.reply_to_message.from_user.full_name
    
    if user.balance is None:
        user.balance = 0

    user_info = (
        f"üë§ <b>–ò–º—è:</b> <i>{full_name}</i>\n"
        f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
    )

    balances = (
        f"üåø <b>–°–Ω—é—Ö–∞–Ω–æ:</b> <i>{user.drug_count}</i> –≥—Ä–∞–º–º.\n"
        f"üí∏ <b>–ë–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç—ã:</b> <i>{user.balance}</i> <b>$MEF</b>"
    )

    if clan_name:
        user_info = f"{user_info}üë• <b>–ö–ª–∞–Ω:</b> <b>{clan_name}</b>\n\n{balances}"
    else:
        user_info = f'{user_info}{balances}'

    if user.is_banned == 1:
        user_info = f"‚ùå <b>–õ–ò–ö–í–ò–î–ò–†–û–í–ê–ù</b>\n–ü—Ä–∏—á–∏–Ω–∞: <code>{user.ban_reason}</code>\n\n{user_info}"
    elif user.is_admin == 1:
        user_info = f"üõ°Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n{user_info}"
    elif user.is_tester == 1:
        user_info = f"üíª <b>–¢–µ—Å—Ç–µ—Ä</b>\n\n{user_info}"

    if user.vip == 1:
        user_info = f"üëë <b>VIP-—Å—Ç–∞—Ç—É—Å</b>\n\n{user_info}"
    

    await message.reply(user_info, parse_mode='HTML')


@router.message(Command('botprofile'))
async def botprofile(message: Message):
    bot_user = await get_user(1)
    await message.reply(f"ü§ñ <b>–≠—Ç–æ –ë–æ—Ç</b>\nüåø <b>–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞:</b> <i>{bot_user.drug_count}</i> –≥—Ä–∞–º–º.", parse_mode='HTML')

@router.message(Command('shop'))
async def shop(message: Message):
    user_id = message.from_user.id

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üåø 25 –≥—Ä–∞–º–º - üí∏ 2000 $MEF", callback_data="buy_25"),
        InlineKeyboardButton(text="üåø 50 –≥—Ä–∞–º–º - üí∏ 3500 $MEF", callback_data="buy_50"),
        InlineKeyboardButton(text="üåø 100 –≥—Ä–∞–º–º - üí∏ 6500 $MEF", callback_data="buy_100"),
        width=1
    )

    await message.reply(f"<b>üßô‚Äç‚ôÇÔ∏è –ó–¥–∞—Ä–æ–≤–∞, —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ —á–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –≤–µ—Å—å –º–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.</b>", reply_markup=builder.as_markup(), parse_mode='HTML')


@router.callback_query(F.data.startswith('buy_'))
async def handle_purchase_callback(callback_query: CallbackQuery):
    action = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    print(action)
    match action:
        case '25':
            await handle_purchase(callback_query, user_id, 25, 2000)
        case '50':
            await handle_purchase(callback_query, user_id, 50, 3500)
        case '100':
            await handle_purchase(callback_query, user_id, 100, 6500)
        case _:
            return

async def handle_purchase(callback_query: CallbackQuery, user_id: int, amount: int, cost: int):
    user = await get_user(user_id)

    if user.balance >= cost:
        new_balance = user.balance - cost
        new_drug_count = user.drug_count + amount
        await update_user_balance_and_drug_count(user_id, new_balance, new_drug_count)
        await bot.answer_callback_query(callback_query.id, text=f"üòà –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –∫–µ–Ω—Ç–∏—à–∫–∞. –¢—ã –∫—É–ø–∏–ª {amount} –≥—Ä–∞–º–º –∑–∞ {cost} $MEF.", show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", show_alert=True)

@router.message(Command('give'))
async def give_command(message: Message, command: CommandObject):
    user_id = message.from_user.id
    user = await get_user(user_id)
    try:
        args = command.args.split(' ', maxsplit=1)
    except:
        await message.reply('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —É–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ–ª–∏–∫—É')
        return

    try:
        value = int(args[0])
    except ValueError:
        await message.reply('‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        return

    recipient_id = message.reply_to_message.from_user.id if message.reply_to_message else None
    if recipient_id == 7266772626:
        await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–æ—Ç—É')
        return

    recipient = await get_user(recipient_id)
    if not recipient:
        await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    if value <= 0:
        await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return

    if user.drug_count < value:
        await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –º–µ—Ñ–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
        return

    commission = round(value * 0.10)
    net_value = value - commission
    bot_user = await get_user(1)
    if not bot_user:
        bot_user = await Users.create(id=1, drug_count=0)


    if user.vip == 0:

        recipient.drug_count += net_value
        user.drug_count -= value
        bot_user.drug_count += commission

        await recipient.save()
        await user.save()
        await bot_user.save()

        await bot.send_message(
            LOGS_CHAT_ID,
            f"<b>#GIVE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\n"
            f"user_id: <code>{recipient_id}</code>\nvalue: <code>{net_value}</code>\n"
            f"Commission: <code>{commission}</code>\n\n<a href='tg://user?id={recipient_id}'>mention</a>",
            parse_mode='HTML'
        )

        recipient_full_name = message.reply_to_message.from_user.full_name if message.reply_to_message else ""

        await message.reply(
            f"‚úÖ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> <i>–ø–æ–¥–∞—Ä–∏–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞</i> "
            f"<a href='tg://user?id={recipient_id}'>{recipient_full_name}</a>!\n–ö–æ–º–∏—Å—Å–∏—è: <code>{commission}</code> –≥—Ä. –º–µ—Ñ–∞\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ <code>{net_value}</code> –≥—Ä. –º–µ—Ñ–∞.",
            parse_mode='HTML'
        )

    else:
        recipient.drug_count += value
        user.drug_count -= value

        await recipient.save()
        await user.save()
        await bot_user.save()

        await bot.send_message(
            LOGS_CHAT_ID,
            f"<b>#GIVE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\n"
            f"user_id: <code>{recipient_id}</code>\nvalue: <code>{value}</code>\n",
            parse_mode='HTML'
        )

        recipient_full_name = message.reply_to_message.from_user.full_name if message.reply_to_message else ""

        await message.reply(
            f"‚úÖ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> <i>–ø–æ–¥–∞—Ä–∏–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞</i> "
            f"<a href='tg://user?id={recipient_id}'>{recipient_full_name}</a>!\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ <code>{value}</code> –≥—Ä. –º–µ—Ñ–∞.",
            parse_mode='HTML'
        )

@router.message(Command('work'))
async def work_command(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user.balance is None:
        user.balance = 0

    last_work = user.last_work
    now = datetime.now()

    if last_work:
        last_work = last_work.replace(tzinfo=None)

    if last_work and (now - last_work).total_seconds() < 21600:
        remaining_time = timedelta(hours=6) - (now - last_work)
        remaining_hours = remaining_time.seconds // 3600
        remaining_minutes = (remaining_time.seconds % 3600) // 60

        if remaining_hours > 0:
            await message.reply(
                f'‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ —Ö–æ–¥–∏–ª –ø—Ä—è—Ç–∞—Ç—å <b>–∑–∞–∫–ª–∞–¥–∫—É</b>, –ø–æ–¥–æ–∂–¥–∏ <code>{remaining_hours} —á–∞—Å–æ–≤</code> –∏ <code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>',
                parse_mode='HTML')
        else:
            await message.reply(
                f'‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ —Ö–æ–¥–∏–ª –ø—Ä—è—Ç–∞—Ç—å <b>–∑–∞–∫–ª–∞–¥–∫—É</b>, –ø–æ–¥–æ–∂–¥–∏ <code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>',
                parse_mode='HTML')


        return

    if random.randint(1, 100) > 50:
        count = random.randint(500, 1300)
        user.balance += count
        user.last_work = datetime.now()
        await user.save()
        await message.reply(f"üåø {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ <b>—Å–ø—Ä—è—Ç–∞–ª –∑–∞–∫–ª–∞–¥–∫—É</b>, —Ç–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ —Å–ø–∞–ª–∏–ª, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª <code>{count} $MEF.</code>", parse_mode='HTML')
    else:
        user.last_work = datetime.now()
        await user.save()
        await message.reply(f"‚ùå <b>{message.from_user.first_name}</b>, —Ç–µ–±—è <b>—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç</b> –∏ <b>–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É</b>\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ <b>12 —á–∞—Å–æ–≤.</b>", parse_mode='HTML')



@router.message(Command('find'))
async def find_command(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    drug_count, last_find = user.drug_count, user.last_find
    now = datetime.now()

    if last_find:
        last_find = last_find.replace(tzinfo=None)

    if last_find and (now - last_find).total_seconds() < 21600:
        remaining_time = timedelta(hours=6) - (now - last_find)
        remaining_hours = remaining_time.days * 24 + remaining_time.seconds // 3600
        remaining_minutes = (remaining_time.seconds % 3600) // 60

        if remaining_hours > 0:
            await message.reply(
                f'‚è≥ <b>–¢—ã –Ω–µ–¥–∞–≤–Ω–æ —Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º, –ø–æ–¥–æ–∂–¥–∏</b> <code>{remaining_hours} —á–∞—Å–æ–≤</code> <b>–∏</b> <code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>',parse_mode='HTML')
        else:
            await message.reply(
                f'‚è≥ <b>–¢—ã –Ω–µ–¥–∞–≤–Ω–æ —Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º, –ø–æ–¥–æ–∂–¥–∏</b> <code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>',
                parse_mode='HTML')
        return

    if random.randint(1, 100) > 50:
        count = random.randint(2, 10)
        user.drug_count += count
        user.last_find = datetime.now()
        user.last_use_time = datetime.fromtimestamp(0)
        await user.save()
        await message.reply(f"üëç {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ <b>–Ω–∞—à–µ–ª –∫–ª–∞–¥</b>, —Ç–∞–º –ª–µ–∂–∞–ª–æ <code>{count} –≥—Ä.</code> –º–µ—Ñ—á–∏–∫–∞!\nüåø –¢–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã /drug –æ–±–Ω–æ–≤–ª–µ–Ω–æ", parse_mode='HTML')
    else:
        if drug_count > 1:
            count = random.randint(1, round(drug_count))
        else:
            count = 0
        user.drug_count -= count
        user.last_find = datetime.now()
        await user.save()
        if count != 0:
            await message.reply(f"‚ùå <b>{message.from_user.first_name}</b>, —Ç–µ–±—è <b>—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç</b> –∏ <b>–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É</b>\nüåø –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—É–ø–∏—Ç—å—Å—è, –º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∑—è—Ç–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ <code>{count} –≥—Ä.</code>\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ <b>6 —á–∞—Å–æ–≤.</b>", parse_mode='HTML')
        else:
            await message.reply(f"‚ùå <b>{message.from_user.first_name}</b>, —Ç–µ–±—è <b>—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç</b> –∏ <b>–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É</b>\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ <b>6 —á–∞—Å–æ–≤.</b>", parse_mode='HTML')

@router.message(Command('top'))
async def top_command(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    top_users = await Users.all().order_by('-drug_count')

    if top_users:
        response = "üîù–¢–û–ü 10 –õ–Æ–¢–´–• –ú–ï–§–ï–î–†–û–ù–©–ò–ö–û–í –í –ú–ò–†–ïüîù:\n\n"
        valid_user_ids = {user.id for user in top_users if user.id != 1 and user.drug_count > 0 and user.is_tester != True and user.is_admin != True}

        async def fetch_user_info(user_id):
            try:
                return (user_id, await bot.get_chat(user_id))
            except TelegramBadRequest:
                return (user_id, None)

        user_infos = await asyncio.gather(
            *[fetch_user_info(valid_user_id) for valid_user_id in valid_user_ids]
        )

        user_info_dict = {info_id: info for info_id, info in user_infos if info}

        counter = 1
        for user in top_users:
            if user.id == 1:
                continue
            drug_count = user.drug_count
            user_info = user_info_dict.get(user.id, None)
            if user_info:
                if user_info.full_name == 'Group' or user_info.full_name == 'Channel':
                    continue
                if counter == 11:
                    break
                else:
                    response += f"{counter}) *{user_info.full_name}*: `{drug_count} –≥—Ä. –º–µ—Ñ–∞`\n"
                    counter += 1

        if counter == 1:
            await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')
        else:
            await message.reply(response, parse_mode='markdown')
    else:
        await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')

@router.message(Command('take'))
async def take_command(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    reply_msg = message.reply_to_message
    if reply_msg:
        if reply_msg.from_user.id == 7266772626:
            await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ —É –±–æ—Ç–∞')
            return
        if reply_msg.from_user.id != message.from_user.id:
            victim = await get_user(reply_msg.from_user.id)
            if not victim or user.drug_count <= 1 or victim.drug_count <= 1:
                await message.reply('‚ùå –£ –≤–∞—Å –∏–ª–∏ —É –∂–µ—Ä—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞.')
                return
            last_time_data = await state.get_data()
            last_time = last_time_data.get('time') if last_time_data else None

            if last_time and (datetime.now() - datetime.fromisoformat(last_time)).total_seconds() < 86400:
                await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                return

            variables = ['noticed', 'hit', 'pass']
            randomed = random.choice(variables)
            if randomed == 'noticed':
                user.drug_count -= 1
                await message.reply('‚ùå <b>–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞</b>, –∏ —Ç—ã —Ä–µ—à–∏–ª —É–±–µ–∂–∞—Ç—å. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–∫–∞ —Ç—ã –±–µ–∂–∞–ª, <b>—Ç—ã –ø–æ—Ç–µ—Ä—è–ª</b> <code>1 –≥—Ä.</code>', parse_mode='HTML')
            elif randomed == 'hit':
                user.drug_count -= 1
                await message.reply('‚ùå <b>–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞</b>, –∏ –ø–∏–∑–¥–∞–Ω—É–ª–∞ —Ç–µ–±—è –±—É—Ç—ã–ª–∫–æ–π –ø–æ –±–∞—à–∫–µ. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. <b>–ñ–µ—Ä—Ç–≤–∞ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞</b> `1 –≥—Ä.`', parse_mode='HTML')
            elif randomed == 'pass':
                victim.drug_count -= 1
                user.drug_count += 1
                await victim.save()
                victim_user_id = reply_msg.from_user.id
                await message.reply(f"‚úÖ <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> <b>—Å–ø–∏–∑–¥–∏–ª(-–∞) –æ–¥–∏–Ω –≥—Ä–∞–º–º –º–µ—Ñ–∞</b> —É <a href='tg://user?id={victim_user_id}'>{reply_msg.from_user.first_name}</a>!", parse_mode='HTML')
            await state.update_data(time=datetime.now().isoformat())
            await user.save()
    else:
        await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ.')


@router.message(Command('bonus'))
async def bonus_command(message: Message):
    user = await get_user(message.from_user.id)

    if user.bonus:
        await message.reply("<b>üõë –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å!</b>", parse_mode='HTML')
        return

    user.drug_count += 20
    user.bonus = True
    await user.save()

    await message.reply(
        f"üéâ <b>–¢—ã –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 20 –≥—Ä–∞–º–º! –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{user.drug_count} –≥—Ä–∞–º–º.</code>", parse_mode='HTML')


@router.message(Command('vipbonus'))
async def vipbonus_command(message: Message):
    user = await get_user(message.from_user.id)

    if user.vip == 0 or user.vip is None:
        await message.reply("<b>üõë –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å–∞!</b>", parse_mode='HTML')
        return

    now = datetime.now()
    today = now.date()

    if user.vip_bonus != today:
        user.drug_count += 50
        user.vip_bonus = today

        await user.save()
        await message.reply(
            f"üéâ <b>–¢—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 50 –≥—Ä–∞–º–º! –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> <code>{user.drug_count} –≥—Ä–∞–º–º.</code>", parse_mode='HTML')

    else:
        await message.reply("<b>üõë –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±–æ–Ω—É—Å!</b>", parse_mode='HTML')


@router.message(Command('drug'))
async def drug_command(message: Message):
    user = await get_user(message.from_user.id)
    drug_count, last_use_time = user.drug_count, user.last_use_time
    now = datetime.now()

    if last_use_time:
        last_use_time = last_use_time.replace(tzinfo=None)

    if last_use_time and (now - last_use_time).total_seconds() < 3600:
        remaining_time = timedelta(hours=1) - (now - last_use_time)
        await message.reply(f"‚ùå <b>{message.from_user.first_name}</b>, <i>—Ç—ã —É–∂–µ –Ω—é—Ö–∞–ª(-–∞)!</i>\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ <code>{drug_count} –≥—Ä–∞–º–º</code> –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â—É—é –¥–æ—Ä–æ–≥—É –Ω–∞—á–µ—Ä—Ç–∏–º —á–µ—Ä–µ–∑ <code>{remaining_time.seconds // 60} –º–∏–Ω—É—Ç.</code>", parse_mode='HTML')
        return

    if random.randint(0, 100) < 5:
        await message.reply(f"üíÄ <b>{message.from_user.first_name}</b>, <i>—Ç—ã –ø–æ–π–º–∞–ª(-–∞) –ø–µ—Ä–µ–¥–æ–∑!</i>\nüöë <i>–¢–µ–±—è –æ—Ç–≤–µ–∑–ª–∏ –≤ —Ä–µ—Ö–∞–±,</i> –≤–µ—Å—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å <b>–±—ã–ª —Å–±—Ä–æ—à–µ–Ω</b>\n\n‚è≥ –¢–µ–±—è –æ—Ç–ø—É—Å—Ç—è—Ç —á–µ—Ä–µ–∑ <code>1 —á–∞—Å.</code>", parse_mode='HTML')
        user.last_use_time = now
        user.drug_count = 0
        await user.save()
        return
    elif random.randint(0, 100) < 40:
        await message.reply(f"üßÇ <b>{message.from_user.first_name}</b>, <i>—Ç—ã –ø—Ä–æ—Å—ã–ø–∞–ª(-–∞) –≤–µ—Å—å –º–µ—Ñ—á–∏–∫!</i>\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ <code>{drug_count}</code> –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â—É—é –¥–æ—Ä–æ–≥—É –Ω–∞—á–µ—Ä—Ç–∏–º —á–µ—Ä–µ–∑ <code>1 —á–∞—Å.</code>", parse_mode='HTML')
        user.last_use_time = now    
        await user.save()
        return
    else:
        count = random.randint(1, 10)
        user.drug_count += count
        user.last_use_time = now
        await user.save()
        await message.reply(f"üëç <b>{message.from_user.first_name}</b>, <i>—Ç—ã –∑–∞–Ω—é—Ö–Ω—É–ª(-–∞) {count} –≥—Ä–∞–º–º –º–µ—Ñ—á–∏–∫–∞!</i>\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ <code>{user.drug_count}</code> –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â—É—é –¥–æ—Ä–æ–≥—É –Ω–∞—á–µ—Ä—Ç–∏–º —á–µ—Ä–µ–∑ <code>1 —á–∞—Å.</code>", parse_mode='HTML')


@router.message(Command('help'))
async def help_command(message: Message):
    await message.reply('''–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
                        
<code>/profile</code> - <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>
<code>/drug</code> - <b>–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ñ–∏–∫</b>
<code>/top</code> - <b>—Ç–æ–ø —Ç–æ—Ä—á–µ–π –º–∏—Ä–∞</b>
<code>/take</code> - <b>—Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–∏–∫ —É –±–ª–∏–∂–Ω–µ–≥–æ</b>
<code>/give</code> - <b>–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–∏–∫–æ–º</b>
<code>/casino</code> - <b>–∫–∞–∑–∏–Ω–æ</b>
<code>/find</code> - <b>—Å—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–ª–∞–¥–æ–º</b>
<code>/work</code> - <b>–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É</b>
<code>/shop</code> - <b>–∫—É–ø–∏—Ç—å –≥—Ä–∞–º–º—ã –∑–∞ –∫—Ä–∏–ø—Ç—É</b>                    
<code>/about</code> - <b>—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ</b>
<code>/clancreate</code> - <b>—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω</b>
<code>/deposit</code> - <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞</b>
<code>/withdraw</code> - <b>–≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–ª–∞–Ω–∞</b>
<code>/clantop</code> - <b>—Ç–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞</b>
<code>/clanbalance</code> - <b>–±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞</b>
<code>/claninfo</code> - <b>–æ –∫–ª–∞–Ω–µ</b>
<code>/claninvite</code> - <b>–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω</b>
<code>/clankick</code> - <b>–∫–∏–∫–Ω—É—Ç—å –∏–∑ –∫–ª–∞–Ω–∞</b>
<code>/clanleave</code> - <b>–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞</b>
<code>/clandisband</code> - <b>—Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω</b>
<code>/botprofile</code> - <b>–ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ (—Ä–µ–∑–µ—Ä–≤ –∫–∞–∑–∏–Ω–æ)</b>
<code>/buymeph</code> - <b>–∫—É–ø–∏—Ç—å –≥—Ä–∞–º–º—ã –∑–∞ –¥–æ–Ω–∞—Ç</b>
<code>/buyvip</code> - <b>–ø–æ–∫—É–ø–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞</b>
<code>/bonus</code> - <b>–±–æ–Ω—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞</b>
<code>/vipbonus</code> - <b>–±–æ–Ω—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ VIP-–∏–≥—Ä–æ–∫–∞</b>
    ''', parse_mode='HTML')

@router.message(Command('grach'))
async def start_command(message: Message):
    await message.reply("–≥—Ä–∞—á —Ö—É–µ—Å–æ—Å")

@router.message(Command('rules'))
async def start_command(message: Message):
    await message.reply('''–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mephmetrbot:
<b>1) –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥ - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞ - –±–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ
3) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ —Ç–æ–ø –∫–ª–∞–Ω–æ–≤ –∏ —Ç–æ–ø —é–∑–µ—Ä–æ–≤ - –≤—ã–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–µ –±–∞–Ω —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º
4) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ - –æ–±–Ω—É–ª–µ–Ω–∏–µ –∏ –±–∞–Ω</b>

<b>–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã.
–°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤ –∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω–æ –Ω–∞–∫–∞–∑—É–µ–º–æ–π</b>
*–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º* (<b>–∫–æ–º–∞–Ω–¥–∞</b> <code>/about</code>)''', parse_mode='HTML')

@router.message(Command('start'))
async def start_command(message: Message, command: CommandObject):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí¨ –ß–∞—Ç', url='https://t.me/mephmetrchat')
    )
    await message.reply("üëã <b>–ó–¥–∞—Ä–æ–≤–∞ —à–Ω—ã—Ä</b>, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã <b>—Å—á–∏—Ç–∞—Ç—å</b> —Å–∫–æ–ª—å–∫–æ <b>–≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω—á–∏–∫–∞</b> —Ç—ã —Å–Ω—é—Ö–∞–ª\n\nüõë –í–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç, –∑–¥–µ—Å—å –Ω–µ –ø—Ä–æ–¥–∞—é—Ç –º–µ—Ñ. –ù–µ —Å—Ç–æ–∏—Ç –ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º –º–Ω–µ, –≤–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ - –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ä–≥–∞–Ω–∞–º.\n\nüßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω <b>vccuser.t.me</b> –∏ <b>vccleak.t.me</b>", reply_markup=builder.as_markup(), parse_mode='HTML')


@router.message(Command('about'))
async def about_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí¨ –ß–∞—Ç', url='https://t.me/mephmetrchat')
    )
    await message.reply("üßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω vccuser.t.me –∏ vccleak.t.me", reply_markup=builder.as_markup())


@router.message(Command('play'))
async def play_command(message: Message):
    user_id = message.from_user.id
    user = await get_user(message.from_user.id)
    if user_id in games:
        await message.reply("‚ùå <b>–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞.</b>", parse_mode='HTML')
        return

    last_play = user.last_play
    now = datetime.now()

    if last_play:
        last_play = last_play.replace(tzinfo=None)

    if last_play and (now - last_play).total_seconds() < 3600:
        remaining_time = timedelta(hours=1) - (now - last_play)
        remaining_hours = remaining_time.seconds // 3600
        remaining_minutes = (remaining_time.seconds % 3600) // 60

        if remaining_hours > 0:
            await message.reply(f'<b>‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –∏–≥—Ä–∞–ª, –ø–æ–¥–æ–∂–¥–∏</b> <code>{remaining_hours} —á–∞—Å–æ–≤</code> <b>–∏</b><code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>', parse_mode='HTML')
        else:
            await message.reply(f'<b>‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ –∏–≥—Ä–∞–ª, –ø–æ–¥–æ–∂–¥–∏ </b><code>{remaining_minutes} –º–∏–Ω—É—Ç.</code>', parse_mode='HTML')
        return

    secret_number = random.randint(1, 10)
    games[user_id] = secret_number

    buttons = [InlineKeyboardButton(text=str(i), callback_data=f'guess_{i}') for i in range(1, 11)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 5] for i in range(0, 10, 5)])

    await message.reply("üéÆ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –≤—ã–±–µ—Ä–∏ –µ–≥–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.</b>", reply_markup=keyboard, parse_mode='HTML')

@router.callback_query(lambda call: call.data.startswith('guess_'))
async def process_guess(call: CallbackQuery):
    user_id = call.from_user.id
    user = await get_user(call.from_user.id)
    if user_id not in games:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥–æ–π /play.")
        return

    guess = int(call.data.split('_')[1])
    secret_number = games[user_id]

    if guess == secret_number:
        reward = random.randint(1, 20)
        user.drug_count += reward
        user.last_play = datetime.now()
        await user.save()
        await call.message.edit_text(f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –∏ –≤—ã–∏–≥—Ä–∞–ª</b> <code>{reward} –≥—Ä!</code>\n–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å <code>{user.drug_count} –≥—Ä.</code>", parse_mode='HTML')
    else:
        await call.message.edit_text(f"üò¢ <b>–£–≤—ã, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ</b> <code>{secret_number}</code>. <b>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ!</b>", parse_mode='HTML')
        user.last_play = datetime.now()
        await user.save()

    del games[user_id]
    await call.answer()
