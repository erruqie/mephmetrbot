from aiocryptopay import AioCryptoPay, Networks
from mephmetrbot.handlers.models import Users, Invoices
from mephmetrbot.config import bot, CRYPTO_PAY_TOKEN, RUB_PER_MEPH, LOGS_CHAT_ID
from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

crypto = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)

router = Router()

async def get_user(user_id):
    user, _ = await Users.get_or_create(id=user_id)
    return user


@router.message(Command('buyvip'))
async def buy_vip(message: Message):
    invoice = await crypto.create_invoice(
        amount='149',
        fiat='RUB',
        currency_type='fiat',
        description=f'–ü–æ–∫—É–ø–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞ –≤ –±–æ—Ç–µ.',
        allow_comments=True,
        allow_anonymous = True,
        expires_in = '300'
    )

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice.bot_invoice_url),
        InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                             callback_data=f"invoicecheck_{invoice.invoice_id}_149_{message.from_user.id}")
    )

    await message.reply(
        f'üí∞ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <code>VIP-—Å—Ç–∞—Ç—É—Å</code> –∑–∞ <code>149 RUB</code> —á–µ—Ä–µ–∑ CryptoBot\n\n'
        f'<b>VIP-—Å—Ç–∞—Ç—É—Å —Å–Ω–∏–º–∞–µ—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ, —É–±–∏—Ä–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑ –≤ –¥–µ–Ω—å –∑–∞–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å.</b>',
        parse_mode='HTML',
        disable_webpage_preview=True,
        reply_markup=builder.as_markup()
    )

@router.message(Command('buymeph'))
async def buymef(message: Message, command: CommandObject):
    args = command.args
    if args:
        value = command.args.split(' ', maxsplit=1)[0]
    else:
        await message.reply(f'‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –≥—Ä. –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å\n'
                            f'–ü—Ä–∏–º–µ—Ä: <code>/buymeph 100</code>\n\n'
                            f'–ö—É—Ä—Å: <code>1 –≥—Ä. = {float(RUB_PER_MEPH)} RUB</code>', parse_mode='html')
        return
    if int(value) < 10:
        await message.reply(f'‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: 10 –≥—Ä.')
        return
    else:
        invoice_amount = int(int(value) * float(RUB_PER_MEPH))
        invoice = await crypto.create_invoice(
            amount=invoice_amount,
            fiat='RUB',
            currency_type='fiat',
            description=f'{value} –µ–¥–∏–Ω–∏—Ü –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã',
            allow_comments=True,
            allow_anonymous=True,
            expires_in='300'
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice.bot_invoice_url),
            InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"checkinvoice_{invoice.invoice_id}_{value}_{message.from_user.id}")
        )

        await message.reply(
            f'üí∞ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å <code>{value} –≥—Ä.</code> –∑–∞ <code>{invoice_amount} RUB</code> —á–µ—Ä–µ–∑ CryptoBot\n\n',
            parse_mode='HTML',
            disable_webpage_preview=True,
            reply_markup=builder.as_markup()
        )

@router.callback_query(F.data.startswith("checkinvoice_"))
async def checkinvoice_callback(callback: CallbackQuery):
    data = callback.data.split("_")
    invoice_id = data[1]
    value = data[2]
    userid = data[3]
    try:
        invoice_data = await Invoices.get(invoice_id=invoice_id)
        status = invoice_data.status
        if status == 'paid':
            await callback.answer()
            return
    except:
        invoice = await crypto.get_invoices(invoice_ids=invoice_id)
        status = invoice[0].status
        if status == 'paid':
            user = await get_user(userid)
            user.drug_count = round(user.drug_count + int(value), 1)
            await user.save()
            await bot.send_message(callback.message.chat.id,
                                    f"‚úÖ –¢—ã –∫—Ä—É—Ç –±—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏–ª {value} –≥—Ä–∞–º –≥—Ä–∞–º–º –º–µ—Ñ–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
            await Invoices.create(invoice_id=invoice_id, status='paid')
            await callback.answer()
            await bot.send_message(LOGS_CHAT_ID, 
                                   f'#BUYMEPH\n\n'
                                   f'userid: <code>{userid}</code>\n'
                                   f'amount: {value}\n'
                                   f'invoice_id: #IV{invoice_id}\n\n'
                                   f'<a href="tg://user?id={userid}">mention user</a>', parse_mode='html')
        else:
            await callback.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return



@router.callback_query(F.data.startswith("invoicecheck_"))
async def invoicecheck_callback(callback: CallbackQuery):
    data = callback.data.split("_")
    invoice_id = data[1]
    value = data[2]
    userid = data[3]
    try:
        invoice_data = await Invoices.get(invoice_id=invoice_id)
        status = invoice_data.status
        if status == 'paid':
            await callback.answer()
            return
    except:
        invoice = await crypto.get_invoices(invoice_ids=invoice_id)
        status = invoice[0].status
        if status == 'paid':
            user = await get_user(userid)
            user.vip = 1
            await user.save()
            await bot.send_message(callback.message.chat.id,
                                    f"‚úÖ –¢—ã –∫—Ä—É—Ç –±—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏–ª VIP-—Å—Ç–∞—Ç—É—Å, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
            await Invoices.create(invoice_id=invoice_id, status='paid')
            await callback.answer()
            await bot.send_message(LOGS_CHAT_ID,
                                   f'#BUYVIP\n\n'
                                   f'userid: <code>{userid}</code>\n'
                                   f'invoice_id: #IV{invoice_id}\n\n'
                                   f'<a href="tg://user?id={userid}">mention user</a>', parse_mode='html')
        else:
            await callback.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return