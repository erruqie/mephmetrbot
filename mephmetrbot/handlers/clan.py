import random
import sys
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from mephmetrbot.config import bot, LOGS_CHAT_ID
from mephmetrbot.handlers.models import Users, Clans
from tortoise.exceptions import IntegrityError, DoesNotExist
from datetime import datetime, timedelta

router = Router()

async def get_user(user_id):
    user, _ = await Users.get_or_create(id=user_id)
    return user

async def get_clan(clan_id):
    clan, _ = await Clans.get_or_create(id=clan_id)
    return clan

@router.message(Command('clancreate'))
async def create_clan(message: Message, command: Command):
    args = command.args
    user_id = message.from_user.id
    user = await get_user(user_id)

    if args:
        clan_name = args
        clan_exist = await Clans.filter(clan_name=clan_name).exists()

        if clan_exist:
            await message.reply('üõë <b>–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>', parse_mode='HTML')
        else:
            clan_id = random.randint(100000, 999999)
            drug_count = user.drug_count

            if user.clan_member is not None and user.clan_member > 1:
                await message.reply("üõë <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>", parse_mode='HTML')
            elif user.clan_member is None or user.clan_member == 0:
                if drug_count >= 100:
                    try:
                        new_clan = await Clans.create(
                            id=clan_id,
                            clan_name=clan_name,
                            clan_owner_id=user_id,
                            clan_balance=0
                        )
                        user.clan_member = new_clan.id
                        user.drug_count -= 100
                        await user.save()

                        await bot.send_message(
                            LOGS_CHAT_ID,
                            f"üèÜ <b>#NEWCLAN</b>\n\n"
                            f"üÜî <b>Clan ID:</b> <code>{clan_id}</code>\n"
                            f"üìù <b>Clan Name:</b> <code>{clan_name}</code>\n"
                            f"üë§ <b>Clan Owner ID:</b> <code>{user_id}</code>\n\n"
                            f"<a href='tg://user?id={user_id}'>üîó Mention Clan Owner</a>",
                            parse_mode='HTML'
                        )

                        await message.reply(
                            f"‚úÖ –ö–ª–∞–Ω <b>{clan_name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞: <code>{clan_id}</code>\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <code>100</code> –≥—Ä.",
                            parse_mode='HTML'
                        )
                    except IntegrityError as e:
                        await message.reply(f"üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        print(f"IntegrityError: {e}")
                else:
                    await message.reply("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: <code>100</code> –≥—Ä.", parse_mode='HTML')
    else:
        await message.reply("üõë –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä:<code>/clancreate –ö—Ä–£—Ç–´–µ_–ü–µ–†—Ü–´</code>\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: `100` –≥—Ä.", parse_mode='HTML')

@router.message(Command('deposit'))
async def deposit(message: Message, command: Command):
        args = command.args if command.args else None

        if args is None:
            await message.reply("üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n<code>/deposit 100</code>", parse_mode='HTML')
            return

        args = args.split(' ', maxsplit=1)[0]
        user_id = message.from_user.id
        user = await get_user(user_id)

        try:
            cost = int(args)
        except ValueError:
            await message.reply('‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        user_balance = user.drug_count
        clan_id = user.clan_member

        if clan_id is None or clan_id == 0:
            await message.reply("üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ</b>", parse_mode='HTML')
            return

        clan = await Clans.filter(id=clan_id).first()

        if clan is None:
            await message.reply("üõë <b>–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", parse_mode='HTML')
            return

        if cost < 0:
            await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
            return
        elif cost == 0:
            await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é')
            return

        elif cost > user_balance:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{user_balance}</code> –≥—Ä.", parse_mode='HTML')
            return

        clan.clan_balance += cost
        user.drug_count -= cost
        await clan.save()
        await user.save()

        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ <code>{clan.clan_name}</code> –Ω–∞ <code>{cost}</code> –≥—Ä.",
            parse_mode='HTML'
        )

        await bot.send_message(
            LOGS_CHAT_ID,
            f"üí∞ <b>#DEPOSIT</b>\n\n"
            f"üè∑Ô∏è <b>Clan Name:</b> <code>{clan.clan_name}</code>\n"
            f"üíµ <b>Amount:</b> <code>{cost}</code>\n"
            f"üÜî <b>User ID:</b> <code>{user_id}</code>\n"
            f"üë§ <b>First Name:</b> {message.from_user.first_name}\n\n"
            f"<a href='tg://user?id={user_id}'>üîó Mention</a>",
            parse_mode='HTML'
        )


@router.message(Command('withdraw'))
async def withdraw(message: Message, command: Command):
        args = command.args if command.args else None

        if args is None:
            await message.reply("üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n<code>/withdraw 100</code>", parse_mode='HTML')
            return


        args = args.split(' ', maxsplit=1)[0]
        user_id = message.from_user.id
        user = await get_user(user_id)

        try:
            cost = int(args)
        except ValueError:
            await message.reply('‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        user_balance = user.drug_count
        clan_id = user.clan_member

        clan = await Clans.filter(id=clan_id).first()
        clan_owner_id = clan.clan_owner_id

        if clan is None:
            await message.reply("üõë <b>–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>", parse_mode='HTML')
            return

        if user_id != clan_owner_id:
            await message.reply(f"üõë <b>–í—ã–≤–æ–¥–∏—Ç—å —Å –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å!</b>", parse_mode='HTML')
            return

        if cost < 0:
            await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
            return
        elif cost == 0:
            await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é')
            return
        elif cost > clan.clan_balance:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –∫–ª–∞–Ω–∞. –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞: <code>{clan.clan_balance}</code> –≥—Ä.",
                        parse_mode='HTML')
            return

        clan.clan_balance -= cost
        user.drug_count += cost
        await clan.save()
        await user.save()

        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ <code>{cost}</code> –≥—Ä. —Å –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞–Ω–∞ <code>{clan.clan_name}</code>.",
            parse_mode='HTML'
        )

        await bot.send_message(
            LOGS_CHAT_ID,
            f"üí∞ <b>#WITHDRAW</b>\n\n"
            f"üè∑Ô∏è <b>Clan Name:</b> <code>{clan.clan_name}</code>\n"
            f"üíµ <b>Amount:</b> <code>{cost}</code>\n"
            f"üÜî <b>User ID:</b> <code>{user_id}</code>\n"
            f"üë§ <b>First Name:</b> {message.from_user.first_name}\n\n"
            f"<a href='tg://user?id={user_id}'>üîó Mention User</a>",
            parse_mode='HTML'
        )


@router.message(Command('clantop'))
async def clan_top(message: Message):
    top_clans = await Clans.all().order_by('-clan_balance')[:10].values('clan_name', 'clan_balance')

    if top_clans:
        response = "üîù –¢–û–ü 10 –ú–ï–§–ï–î–†–û–ù–û–í–´–• –ö–ê–†–¢–ï–õ–ï–ô –í –ú–ò–†–ï üîù:\n"
        counter = 1

        for clan in top_clans:
            clan_name = clan['clan_name']
            clan_balance = clan['clan_balance']
            response += f"{counter}) <b>{clan_name}</b>: <code>{clan_balance} –≥—Ä. –º–µ—Ñ–∞</code>\n"
            counter += 1

        await message.reply(response, parse_mode='HTML')
    else:
        await message.reply('üõë –ï—â—ë –Ω–∏ –æ–¥–∏–Ω –∫–ª–∞–Ω –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')

@router.message(Command('clanowner'))
async def clan_owner(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member
    if clan_id == 0:
        await message.reply(f"üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
    elif clan_id > 0:
        clan = await Clans.filter(id=clan_id).first()
        current_owner_id = clan.clan_owner_id
        if user_id != current_owner_id:
            await message.reply(f"üõë <b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞!</b>", parse_mode='HTML')
            return

        if message.reply_to_message:
            new_owner_id = message.reply_to_message.from_user.id
        elif len(message.text.split()) >= 2:
            new_owner_id = int(message.text.split()[1])
        else:
            await message.reply(f"üõë <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞!</b>", parse_mode='HTML')
            return
        new_owner = await Users.filter(id=new_owner_id).first()

        if not new_owner:
            await message.reply(f"üõë <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º</b>", parse_mode='HTML')
            return
        await Clans.filter(id=clan_id).update(clan_owner_id=new_owner_id)
        await message.reply(f"‚úÖ <b>–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞!</b>", parse_mode='HTML')

# clan_wars = {}
#
# # @router.message(Command('clanwar'))
# async def clanwar(message: Message):
#     user_id = message.from_user.id
#     cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
#     user = cursor.fetchone()
#
#     if not user:
#         await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
#         return
#
#     is_banned = user[4]
#     clan_id = user[7]
#
#     if is_banned == 1:
#         await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
#         return
#
#     if clan_id == 0:
#         await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
#     else:
#         cursor.execute('SELECT clan_id, clan_name, clan_owner_id FROM clans WHERE clan_id = ?', (clan_id,))
#         clan = cursor.fetchone()
#         clan_name, clan_owner_id = clan[1], clan[2]
#
#         if user_id != clan_owner_id:
#             await message.reply(f"üõë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞", parse_mode='markdown')
#             return
#
#         if len(message.text.split()) < 2:
#             await message.reply(f"üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã", parse_mode='markdown')
#             return
#
#         target_clan_identifier = ' '.join(message.text.split()[1:])
#         cursor.execute('SELECT clan_id, clan_name FROM clans WHERE clan_name = ? OR clan_id = ?', (target_clan_identifier, target_clan_identifier))
#         target_clan = cursor.fetchone()
#
#         if not target_clan:
#             await message.reply(f"üõë –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º", parse_mode='markdown')
#             return
#
#         target_clan_id, target_clan_name = target_clan
#
#         cursor.execute('SELECT chat_id FROM chats')
#         chats = cursor.fetchall()
#         for chat_id_row in chats:
#             chat_id = chat_id_row[0]
#             try:
#                 await bot.send_message(chat_id, f"‚öîÔ∏è –ö–ª–∞–Ω *{clan_name}* –Ω–∞—á–∞–ª –≤–æ–π–Ω—É —Å *{target_clan_name}*!", parse_mode='markdown')
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
#
#         clan_wars[clan_id] = target_clan_id
#         clan_wars[target_clan_id] = clan_id
#
#         start_time = datetime.now()
#
#         while (datetime.now() - start_time).total_seconds() < 3600:
#             await asyncio.sleep(3600 - (datetime.now() - start_time).total_seconds())
#
#         cursor.execute('SELECT SUM(drug_count) FROM users WHERE clan_id = ?', (clan_id,))
#         clan_total = cursor.fetchone()[0]
#
#         cursor.execute('SELECT SUM(drug_count) FROM users WHERE clan_id = ?', (target_clan_id,))
#         target_clan_total = cursor.fetchone()[0]
#
#         if clan_total > target_clan_total:
#             winner_clan_id, loser_clan_id = clan_id, target_clan_id
#             winner_clan_name, loser_clan_name = clan_name, target_clan_name
#         else:
#             winner_clan_id, loser_clan_id = target_clan_id, clan_id
#             winner_clan_name, loser_clan_name = target_clan_name, clan_name
#
#         cursor.execute('UPDATE clans SET clan_balance = clan_balance + (SELECT SUM(drug_count) FROM users WHERE clan_id = ?) WHERE clan_id = ?', (loser_clan_id, winner_clan_id))
#         cursor.execute('UPDATE users SET drug_count = 0 WHERE clan_id = ?', (loser_clan_id,))
#         conn.commit()

        # del clan_wars[clan_id]
        # del clan_wars[target_clan_id]
        #
        # await message.reply(f"‚öîÔ∏è –ö–ª–∞–Ω *{winner_clan_name}* –≤—ã–∏–≥—Ä–∞–ª –≤–æ–π–Ω—É –ø—Ä–æ—Ç–∏–≤ *{loser_clan_name}*!", parse_mode='markdown')
        # for chat_id_row in chats:
        #     chat_id = chat_id_row[0]
        #     try:
        #         await bot.send_message(chat_id, f"*‚öîÔ∏è –ö–ª–∞–Ω {winner_clan_name} –≤—ã–∏–≥—Ä–∞–ª –≤–æ–π–Ω—É –ø—Ä–æ—Ç–∏–≤ {loser_clan_name}!*", parse_mode='markdown')
        #     except Exception as e:
        #         print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

@router.message(Command('claninfo'))
async def claninfo(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member

    if clan_id == 0:
        await message.reply("üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ</b>", parse_mode='HTML')
    else:
        clan = await Clans.filter(id=clan_id).first()
        if clan:
            clan_balance = clan.clan_balance
            clan_name = clan.clan_name
            clan_owner_id = clan.clan_owner_id
            clan_owner = await bot.get_chat(clan_owner_id)
            clan_owner_name = clan_owner.first_name

            await message.reply(
                f"üë• –ö–ª–∞–Ω: <code>{clan_name}</code>\nüëë –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞: <a href='tg://user?id={clan_owner_id}'>{clan_owner_name}</a>\nüåø –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ <code>{clan_balance}</code> –≥—Ä.",
                parse_mode='HTML'
            )
        else:
            await message.reply("üõë <b>–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='HTML')

@router.message(Command('clanmembers'))
async def clanmembers(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member
    clan_members = await Users.filter(clan_member=clan_id).values()
    clan = await Clans.filter(id=clan_id).first()
    if clan:
        clan_name = clan.clan_name
        clan_owner_id = clan.clan_owner_id
        if clan_id > 0:
            if clan_members:
                response = f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ <b>{clan_name}</b>:\n"
                counter = 1
                clan_owner = None
                for member in clan_members:
                    if member['id'] == clan_owner_id:
                        clan_owner = member
                        break
                if clan_owner:
                    user_info = await bot.get_chat(member['id'])
                    response += f"{counter}) <b>{user_info.full_name}</b> üëë\n"
                    counter += 1
                for member in clan_members:
                    if member['id'] != clan_owner_id:
                        user_info = await bot.get_chat(member['id'])
                        response += f"{counter}) {user_info.full_name}\n"
                        counter += 1
                await message.reply(response, parse_mode='HTML')
    else:
        await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='HTML')

@router.message(Command('claninvite'))
async def claninvite(message: Message):
    user_id = message.from_user.id
    try:
        user = await Users.get(id=user_id)
        clan_id = user.clan_member
    except DoesNotExist:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    try:
        clan = await Clans.get(id=clan_id)
    except DoesNotExist:
        await message.reply("–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if clan:
        clan_name = clan.clan_name
        clan_owner_id = clan.clan_owner_id

        if user_id == clan_owner_id:
            reply_msg = message.reply_to_message
            if reply_msg and reply_msg.from_user.id == 7266772626:
                await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–ª–∞–Ω')
                return

            if reply_msg:
                invited_user_id = reply_msg.from_user.id
                try:
                    invited_user = await Users.get(id=invited_user_id)
                    clan_member = invited_user.clan_member
                    clan_invite = invited_user.clan_invite
                    invite_timestamp = invited_user.invite_timestamp
                except DoesNotExist:
                    await Users.create(id=invited_user_id, drug_count=0, is_admin=0, is_banned=0, clan_member=0, clan_invite=0, invite_timestamp=None)
                    clan_member = 0
                    clan_invite = 0
                    invite_timestamp = None

                clan_invite = clan_invite or 0
                clan_member = clan_member or 0

                if clan_member == 0:
                    await Users.filter(id=invited_user_id).update(clan_invite=clan_id, invite_timestamp=datetime.now())

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"clan_accept:{clan_id}:{invited_user_id}"),
                            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"clan_decline:{clan_id}:{invited_user_id}")
                        ]
                    ])

                    await message.reply(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{reply_msg.from_user.first_name}</code> <b>–ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ –∫–ª–∞–Ω {clan_name}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{message.from_user.first_name}</code>\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', reply_markup=keyboard, parse_mode='html')

                elif clan_member > 0:
                    await message.reply(f"üõë <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
        else:
            await message.reply(f"üõë <b>–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å!</b>", parse_mode='HTML')
    else:
        await message.reply(f"üõë {sys.exc_info()[0]}")

@router.message(Command('clankick'))
async def clankick(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member

    if clan_id == 0:
        await message.reply("üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
        return

    try:
        clan = await Clans.get(id=clan_id)
    except Clans.DoesNotExist:
        await message.reply("üõë <b>–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')
        return

    clan_name = clan.clan_name
    clan_owner_id = int(clan.clan_owner_id)

    if user_id == clan_owner_id:
        reply_msg = message.reply_to_message
        if reply_msg:
            kicked_user_id = reply_msg.from_user.id
            kicked_user = await get_user(kicked_user_id)

            if not kicked_user:
                await message.reply("üõë <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')
                return

            if kicked_user.clan_member == clan_id:
                await Users.filter(id=kicked_user_id).update(clan_member=None)
                victim_user_id = reply_msg.from_user.id
                victim_username = f'tg://user?id={victim_user_id}'
                await message.reply(
                    f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{reply_msg.from_user.first_name}]({victim_username})<b> –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞ {clan_name}</b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º [{message.from_user.first_name}](tg://user?id={message.from_user.id}.)',
                    parse_mode='HTML'
                )
            else:
                await message.reply("üõë <b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
        else:
            await message.reply("üõë <b>–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å!</b>", parse_mode='HTML')
    else:
        await message.reply("üõë <b>–ò—Å–∫–ª—é—á–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å!</b>", parse_mode='HTML')

@router.message(Command('clanleave'))
async def clanleave(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member

    if clan_id == 0:
        await message.reply("üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ</b>", parse_mode='HTML')
        return

    try:
        clan = await Clans.get(id=clan_id)
    except Clans.DoesNotExist:
        await message.reply("üõë <b>–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')
        return

    clan_name = clan.clan_name
    clan_owner_id = int(clan.clan_owner_id)

    if user_id == clan_owner_id:
        await message.reply("üõë <b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å!</b>", parse_mode='HTML')
        return

    await Users.filter(id=user_id).update(clan_member=None)

    await message.reply(
        f'‚úÖ <b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏</b> –∫–ª–∞–Ω <code>{clan_name}</code>',
        parse_mode='HTML'
    )

@router.message(Command('clandisband'))
async def clandisband(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    clan_id = user.clan_member
    try:
        clan = await Clans.get(id=clan_id)
    except:
        await message.reply("üõë <b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
        return
    try:
        clan_owner_id = clan.clan_owner_id
        clan_name = clan.clan_name
    except AttributeError:
        await message.reply("üõë <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ!</b>", parse_mode='HTML')
        return

    if clan_id > 0 and user_id == clan_owner_id:

        await Clans.filter(id=clan_id).delete()
        await Users.filter(clan_member=clan_id).update(clan_member=None)
        await Users.filter(clan_member=clan_id).update(clan_invite=None)
        await message.reply(f'‚úÖ –í—ã —Ä–∞—Å–ø—É—Å—Ç–∏–ª–∏ –∫–ª–∞–Ω <code>{clan_name}</code>', parse_mode='HTML')
    elif clan_id > 0 and user_id != clan_owner_id:
        await message.reply(f"üõë <b>–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞!</b>", parse_mode='HTML')

@router.callback_query(F.data.startswith("clan_accept:"))
async def clan_accept(callback_query: CallbackQuery):
    _, clan_id, invited_user_id = callback_query.data.split(":")
    user_id = callback_query.from_user.id

    if int(user_id) == int(invited_user_id):
        try:
            user = await Users.get(id=user_id)
            if user.clan_invite == int(clan_id):
                await Users.filter(id=user_id).update(clan_member=clan_id, clan_invite=0)
                await callback_query.message.edit_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω!")
            else:
                await callback_query.answer("–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        except DoesNotExist:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

@router.callback_query(F.data.startswith("clan_decline:"))
async def clan_decline(callback_query: CallbackQuery):
    _, clan_id, invited_user_id = callback_query.data.split(":")
    user_id = callback_query.from_user.id

    if int(user_id) == int(invited_user_id):
        try:
            user = await Users.get(id=user_id)
            if user.clan_invite == int(clan_id):
                await Users.filter(id=user_id).update(clan_invite=0)
                await callback_query.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω!")
            else:
                await callback_query.answer("–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        except DoesNotExist:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
